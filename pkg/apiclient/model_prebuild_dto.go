/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrebuildDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrebuildDTO{}

// PrebuildDTO struct for PrebuildDTO
type PrebuildDTO struct {
	Branch            string   `json:"branch"`
	CommitInterval    int32    `json:"commitInterval"`
	Id                string   `json:"id"`
	ProjectConfigName string   `json:"projectConfigName"`
	TriggerFiles      []string `json:"triggerFiles"`
}

type _PrebuildDTO PrebuildDTO

// NewPrebuildDTO instantiates a new PrebuildDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrebuildDTO(branch string, commitInterval int32, id string, projectConfigName string, triggerFiles []string) *PrebuildDTO {
	this := PrebuildDTO{}
	this.Branch = branch
	this.CommitInterval = commitInterval
	this.Id = id
	this.ProjectConfigName = projectConfigName
	this.TriggerFiles = triggerFiles
	return &this
}

// NewPrebuildDTOWithDefaults instantiates a new PrebuildDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrebuildDTOWithDefaults() *PrebuildDTO {
	this := PrebuildDTO{}
	return &this
}

// GetBranch returns the Branch field value
func (o *PrebuildDTO) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *PrebuildDTO) SetBranch(v string) {
	o.Branch = v
}

// GetCommitInterval returns the CommitInterval field value
func (o *PrebuildDTO) GetCommitInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommitInterval
}

// GetCommitIntervalOk returns a tuple with the CommitInterval field value
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetCommitIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitInterval, true
}

// SetCommitInterval sets field value
func (o *PrebuildDTO) SetCommitInterval(v int32) {
	o.CommitInterval = v
}

// GetId returns the Id field value
func (o *PrebuildDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PrebuildDTO) SetId(v string) {
	o.Id = v
}

// GetProjectConfigName returns the ProjectConfigName field value
func (o *PrebuildDTO) GetProjectConfigName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectConfigName
}

// GetProjectConfigNameOk returns a tuple with the ProjectConfigName field value
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetProjectConfigNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectConfigName, true
}

// SetProjectConfigName sets field value
func (o *PrebuildDTO) SetProjectConfigName(v string) {
	o.ProjectConfigName = v
}

// GetTriggerFiles returns the TriggerFiles field value
func (o *PrebuildDTO) GetTriggerFiles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TriggerFiles
}

// GetTriggerFilesOk returns a tuple with the TriggerFiles field value
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetTriggerFilesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TriggerFiles, true
}

// SetTriggerFiles sets field value
func (o *PrebuildDTO) SetTriggerFiles(v []string) {
	o.TriggerFiles = v
}

func (o PrebuildDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrebuildDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["branch"] = o.Branch
	toSerialize["commitInterval"] = o.CommitInterval
	toSerialize["id"] = o.Id
	toSerialize["projectConfigName"] = o.ProjectConfigName
	toSerialize["triggerFiles"] = o.TriggerFiles
	return toSerialize, nil
}

func (o *PrebuildDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"branch",
		"commitInterval",
		"id",
		"projectConfigName",
		"triggerFiles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrebuildDTO := _PrebuildDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrebuildDTO)

	if err != nil {
		return err
	}

	*o = PrebuildDTO(varPrebuildDTO)

	return err
}

type NullablePrebuildDTO struct {
	value *PrebuildDTO
	isSet bool
}

func (v NullablePrebuildDTO) Get() *PrebuildDTO {
	return v.value
}

func (v *NullablePrebuildDTO) Set(val *PrebuildDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePrebuildDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePrebuildDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrebuildDTO(val *PrebuildDTO) *NullablePrebuildDTO {
	return &NullablePrebuildDTO{value: val, isSet: true}
}

func (v NullablePrebuildDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrebuildDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
