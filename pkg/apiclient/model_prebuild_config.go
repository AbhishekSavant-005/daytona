/*
Daytona Server API

Daytona Server API

API version: 0.24.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the PrebuildConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrebuildConfig{}

// PrebuildConfig struct for PrebuildConfig
type PrebuildConfig struct {
	// Branch to watch for changes
	Branch *string `json:"branch,omitempty"`
	// Number of commits between each new prebuild
	CommitInterval *int32 `json:"commitInterval,omitempty"`
	// Composite key (project-config-name+branch-name) for the prebuild
	Key *string `json:"key,omitempty"`
	// Project configuration
	ProjectConfig *ProjectConfig `json:"projectConfig,omitempty"`
	// Files that should trigger a new prebuild if changed
	TriggerFiles []string `json:"triggerFiles,omitempty"`
}

// NewPrebuildConfig instantiates a new PrebuildConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrebuildConfig() *PrebuildConfig {
	this := PrebuildConfig{}
	return &this
}

// NewPrebuildConfigWithDefaults instantiates a new PrebuildConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrebuildConfigWithDefaults() *PrebuildConfig {
	this := PrebuildConfig{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *PrebuildConfig) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildConfig) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *PrebuildConfig) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *PrebuildConfig) SetBranch(v string) {
	o.Branch = &v
}

// GetCommitInterval returns the CommitInterval field value if set, zero value otherwise.
func (o *PrebuildConfig) GetCommitInterval() int32 {
	if o == nil || IsNil(o.CommitInterval) {
		var ret int32
		return ret
	}
	return *o.CommitInterval
}

// GetCommitIntervalOk returns a tuple with the CommitInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildConfig) GetCommitIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.CommitInterval) {
		return nil, false
	}
	return o.CommitInterval, true
}

// HasCommitInterval returns a boolean if a field has been set.
func (o *PrebuildConfig) HasCommitInterval() bool {
	if o != nil && !IsNil(o.CommitInterval) {
		return true
	}

	return false
}

// SetCommitInterval gets a reference to the given int32 and assigns it to the CommitInterval field.
func (o *PrebuildConfig) SetCommitInterval(v int32) {
	o.CommitInterval = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PrebuildConfig) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildConfig) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PrebuildConfig) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PrebuildConfig) SetKey(v string) {
	o.Key = &v
}

// GetProjectConfig returns the ProjectConfig field value if set, zero value otherwise.
func (o *PrebuildConfig) GetProjectConfig() ProjectConfig {
	if o == nil || IsNil(o.ProjectConfig) {
		var ret ProjectConfig
		return ret
	}
	return *o.ProjectConfig
}

// GetProjectConfigOk returns a tuple with the ProjectConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildConfig) GetProjectConfigOk() (*ProjectConfig, bool) {
	if o == nil || IsNil(o.ProjectConfig) {
		return nil, false
	}
	return o.ProjectConfig, true
}

// HasProjectConfig returns a boolean if a field has been set.
func (o *PrebuildConfig) HasProjectConfig() bool {
	if o != nil && !IsNil(o.ProjectConfig) {
		return true
	}

	return false
}

// SetProjectConfig gets a reference to the given ProjectConfig and assigns it to the ProjectConfig field.
func (o *PrebuildConfig) SetProjectConfig(v ProjectConfig) {
	o.ProjectConfig = &v
}

// GetTriggerFiles returns the TriggerFiles field value if set, zero value otherwise.
func (o *PrebuildConfig) GetTriggerFiles() []string {
	if o == nil || IsNil(o.TriggerFiles) {
		var ret []string
		return ret
	}
	return o.TriggerFiles
}

// GetTriggerFilesOk returns a tuple with the TriggerFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildConfig) GetTriggerFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.TriggerFiles) {
		return nil, false
	}
	return o.TriggerFiles, true
}

// HasTriggerFiles returns a boolean if a field has been set.
func (o *PrebuildConfig) HasTriggerFiles() bool {
	if o != nil && !IsNil(o.TriggerFiles) {
		return true
	}

	return false
}

// SetTriggerFiles gets a reference to the given []string and assigns it to the TriggerFiles field.
func (o *PrebuildConfig) SetTriggerFiles(v []string) {
	o.TriggerFiles = v
}

func (o PrebuildConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrebuildConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.CommitInterval) {
		toSerialize["commitInterval"] = o.CommitInterval
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.ProjectConfig) {
		toSerialize["projectConfig"] = o.ProjectConfig
	}
	if !IsNil(o.TriggerFiles) {
		toSerialize["triggerFiles"] = o.TriggerFiles
	}
	return toSerialize, nil
}

type NullablePrebuildConfig struct {
	value *PrebuildConfig
	isSet bool
}

func (v NullablePrebuildConfig) Get() *PrebuildConfig {
	return v.value
}

func (v *NullablePrebuildConfig) Set(val *PrebuildConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePrebuildConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePrebuildConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrebuildConfig(val *PrebuildConfig) *NullablePrebuildConfig {
	return &NullablePrebuildConfig{value: val, isSet: true}
}

func (v NullablePrebuildConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrebuildConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
